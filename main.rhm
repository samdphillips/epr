#lang rhombus/static

import:
  rhombus/compat/thread:
    only Channel
    open
  rhombus/thread open
  "json.rhm"
  "pipe.rhm"
  "connector.rhm" open
  "port_processor.rhm" open
  "supervise.rhm" open

def a_ch = Channel()
def b_ch = Channel()

def src = PortSource(~out: ChannelOutputConnect(a_ch))
def annot_time = pipe.TimePipe(~in: ChannelInputConnect(a_ch),
                               ~out: ChannelOutputConnect(b_ch))
def snk = PortSink(~in: ChannelInputConnect(b_ch),
                   ~serializer: json.JsonSerializer())

def sup = Supervisor([src, annot_time, snk])
sup.start()

try:
  Evt.never.sync(~enable_break: #true)
  ~catch e :: Exn.Break:
    #void
sup.stop()
Evt.sync(sup.stopped_evt)
