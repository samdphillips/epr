#lang rhombus/static

import:
  rhombus/thread open
  rhombus/compat/logging open
  "syncvar.rhm" open

export:
  Supervisable
  Supervisor


def_logger log ~topic: #'supervisor


class Supervisable():
  nonfinal

  private field thd :: maybe(Thread) = #false
  private field stopping_iv :: maybe(IVar) = #false
  private field state :: MVar = MVar(#'stopped)
  private field stopped_iv :: IVar = IVar()
  private field dead_iv :: IVar = IVar()

  property stopping_evt :~ Evt: stopping_iv
  property stopped_evt :~ Evt: stopped_iv
  property dead_evt :~ Evt: dead_iv

  property current_state:
    state.get()

  private method state_transition(old, new):
    MVar.update(state, v):
      if v == old
      | log.info(@str{@name transition @old -> @new})
        new
      | error(@str{processor cannot transition from @old to @new})

  method start():
    state_transition(#'stopped, #'starting)
    stopping_iv := IVar()
    stopped_iv := IVar()
    log.info(@str{starting @name})
    thd := thread:
      try:
        on_start()
        state_transition(#'starting, #'running)
        process()
        state_transition(#'running, #'stopping)
        on_stop()
        state_transition(#'stopping, #'stopped)
        stopped_iv.put(#void)
        ~catch e :: Exn:
          log.error(@str{@name dead})
          log.error(to_string(e))
          state.swap(#'dead)
          on_dead()
          dead_iv.put(#void)

  method stop():
    log.info(@str{sending stop to @name, current_state = @current_state})
    match current_state
    | #'stopped || #'stopping || #'dead: #void
    | #'starting:
        Thread.sleep(0.5)
        stop()
    | #'running:
        try:
          (stopping_iv :~ IVar).put(#void)
          ~catch e :: IVar.Exn:
            #void

  method on_start():
    #void

  method on_stop():
    #void

  method on_dead():
    #void

  abstract property name

  abstract method process()


class Supervisor(children :: List.of(Supervisable)):
  extends Supervisable

  override property name: #'supervisor

  override method on_start():
    log.info("starting children")
    for:
      each ch: children
      ch.start()
    log.info("children started")

  override method process():
    stopping_evt.sync()

  private method wait_for_children():
    for:
      each ch: children
      log.info(@str{waiting for exit of @ch})
      Evt.sync(ch.stopped_evt, ch.dead_evt)

  override method on_stop():
    for:
      each ch: children
      ch.stop()
    wait_for_children()
