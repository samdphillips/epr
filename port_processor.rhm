#lang rhombus/static

import:
  lib("racket/port.rkt")
  rhombus/compat/thread:
    expose:
      Evt
  "connector.rhm" open
  "processor.rhm" open
  "serde.rhm"

export:
  PortSource
  PortSink


class PrintSerializer():
  implements serde.Serializer

  override method serialize(val, out_port :: Port.Output):
    println(val, out_port)
    out_port.flush()


class PortSource(~input_port: inp :: Port.Input = Port.Input.current(),
                 ~out: out :: OutputConnect):
  nonfinal
  extends Processor
  field inp_evt = #false

  def read_bytes_line_evt = port.#{read-bytes-line-evt}

  override method process_evt():
   unless inp_evt
   | inp_evt
       := (read_bytes_line_evt(inp) :~ Evt)
       .wrap(fun (s :~ ReadableString): s.to_string())
       .handle(fun(v): on_event(v))
   inp_evt

  method decorate(v):
    {#'message: v}

  method on_event(v):
    when v is_a String
    | out.send(decorate(v))
      process()

class PortSink(~output_port: out_port :: Port.Output = Port.Output.current(),
               ~serializer: serializer :: serde.Serializer = PrintSerializer(),
               ~in: in :: InputConnect):
  nonfinal
  extends Processor

  override method process_evt():
    in.recv_evt().handle(fun(v): on_event(v))

  method on_event(val):
    serializer.serialize(val, out_port)
    process()
