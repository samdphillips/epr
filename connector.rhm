#lang rhombus/static/and_meta

import:
  lib("racket/base.rkt") as r

export:
  Evt
  Channel
  InputConnect
  OutputConnect

annot.macro 'Channel':
  annot_meta.pack_predicate('r.#{channel?}',
                            '(($(statinfo_meta.dot_provider_key),
                               channel_dot_provider))')

dot.macro 'channel_dot_provider $left . $right':
  match right
  | 'in_connect': 'fun (): ChannelInputConnect(~channel: $left)'
  | 'out_connect': 'fun (): ChannelOutputConnect(~channel: $left)'

annot.macro 'Evt':
  annot_meta.pack_predicate('r.#{evt?}',
                            '(($(statinfo_meta.dot_provider_key),
                               evt_dot_provider))')

dot.macro 'evt_dot_provider $left . $right':
  match right
  | 'handle_evt': 'fun (f) :~ Evt: r.#{handle-evt}($left, f)'
  | 'wrap_evt': 'fun (f) :~ Evt: r.#{wrap-evt}($left, f)'

fun Channel() :~ Channel:
  r.#{make-channel}()

def channel_put_evt = r.#{channel-put-evt}

interface OutputConnect:
  method send_evt(val) :~ Evt

  method send(val):
    r.sync(send_evt(val))

interface InputConnect:
  method recv_evt() :~ Evt

  method recv():
    r.sync(recv_evt())

class ChannelInputConnect(~channel: ch :: Channel):
  implements: InputConnect

  override method recv_evt():
    ch

class ChannelOutputConnect(~channel: ch :: Channel):
  implements: OutputConnect

  override method send_evt(val):
    channel_put_evt(ch, val)
