#lang rhombus/static/and_meta

import:
  lib("syncvar/main.rkt") as syncvar
  lib("rhombus/private/amalgam.rkt")!evt

export:
  IVar
  MVar

class IVar(_handle):
  implements evt.Evt

  constructor ():
    super(syncvar.#{make-ivar}())

  override property handle: _handle

  export Exn
  annot.macro 'Exn': 'satisfying(syncvar.#{exn:fail:ivar?})'

  method put(val):
    syncvar.#{ivar-put!}(handle, val)

  method try_get():
    syncvar.#{ivar-try-get}(handle)


class MVar(handle):
  constructor
  | ():
      super(syncvar.#{make-mvar}())
  | (initial_value):
      super(syncvar.#{make-mvar}(initial_value))

  export update
  expr.macro 'update($mvar, $val):
                $body
                ...':
    'syncvar.#{mvar-update!}(($mvar :: MVar).handle, fun ($val): $body ...)'

  method get():
    syncvar.#{mvar-get}(handle)

  method swap(new_value):
    syncvar.#{mvar-swap!}(handle, new_value)
